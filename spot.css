/*! normalize.css v3.0.1 | MIT License | git.io/normalize */
/**
 * 1. Set default font family to sans-serif.
 * 2. Prevent iOS text size adjust after orientation change, without disabling
 *    user zoom.
 */
html {
  font-family: sans-serif;
  /* 1 */
  -ms-text-size-adjust: 100%;
  /* 2 */
  -webkit-text-size-adjust: 100%;
  /* 2 */ }

/**
 * Remove default margin.
 */
body {
  margin: 0; }

/* HTML5 display definitions
   ========================================================================== */
/**
 * Correct `block` display not defined for any HTML5 element in IE 8/9.
 * Correct `block` display not defined for `details` or `summary` in IE 10/11 and Firefox.
 * Correct `block` display not defined for `main` in IE 11.
 */
article,
aside,
details,
figcaption,
figure,
footer,
header,
hgroup,
main,
nav,
section,
summary {
  display: block; }

/**
 * 1. Correct `inline-block` display not defined in IE 8/9.
 * 2. Normalize vertical alignment of `progress` in Chrome, Firefox, and Opera.
 */
audio,
canvas,
progress,
video {
  display: inline-block;
  /* 1 */
  vertical-align: baseline;
  /* 2 */ }

/**
 * Prevent modern browsers from displaying `audio` without controls.
 * Remove excess height in iOS 5 devices.
 */
audio:not([controls]) {
  display: none;
  height: 0; }

/**
 * Address `[hidden]` styling not present in IE 8/9/10.
 * Hide the `template` element in IE 8/9/11, Safari, and Firefox < 22.
 */
[hidden],
template {
  display: none; }

/* Links
   ========================================================================== */
/**
 * Remove the gray background color from active links in IE 10.
 */
a {
  background: transparent; }

/**
 * Improve readability when focused and also mouse hovered in all browsers.
 */
a:active,
a:hover {
  outline: 0; }

/* Text-level semantics
   ========================================================================== */
/**
 * Address styling not present in IE 8/9/10/11, Safari, and Chrome.
 */
abbr[title] {
  border-bottom: 1px dotted; }

/**
 * Address style set to `bolder` in Firefox 4+, Safari, and Chrome.
 */
b,
strong {
  font-weight: bold; }

/**
 * Address styling not present in Safari and Chrome.
 */
dfn {
  font-style: italic; }

/**
 * Address variable `h1` font-size and margin within `section` and `article`
 * contexts in Firefox 4+, Safari, and Chrome.
 */
h1 {
  font-size: 2em;
  margin: 0; }

/**
 * Address styling not present in IE 8/9.
 */
mark {
  background: #ff0;
  color: #000; }

/**
 * Address inconsistent and variable font size in all browsers.
 */
small {
  font-size: 80%; }

/**
 * Prevent `sub` and `sup` affecting `line-height` in all browsers.
 */
sub,
sup {
  font-size: 75%;
  line-height: 0;
  position: relative;
  vertical-align: baseline; }

sup {
  top: -0.5em; }

sub {
  bottom: -0.25em; }

/* Embedded content
   ========================================================================== */
/**
 * Remove border when inside `a` element in IE 8/9/10.
 */
img {
  border: 0; }

/**
 * Correct overflow not hidden in IE 9/10/11.
 */
svg:not(:root) {
  overflow: hidden; }

/* Grouping content
   ========================================================================== */
/**
 * Address margin not present in IE 8/9 and Safari.
 */
figure {
  margin: 1em 40px; }

/**
 * Address differences between Firefox and other browsers.
 */
hr {
  -moz-box-sizing: content-box;
  box-sizing: content-box;
  height: 0; }

/**
 * Contain overflow in all browsers.
 */
pre {
  overflow: auto; }

/**
 * Address odd `em`-unit font size rendering in all browsers.
 */
code,
kbd,
pre,
samp {
  font-family: monospace, monospace;
  font-size: 1em; }

/* Forms
   ========================================================================== */
/**
 * Known limitation: by default, Chrome and Safari on OS X allow very limited
 * styling of `select`, unless a `border` property is set.
 */
/**
 * 1. Correct color not being inherited.
 *    Known issue: affects color of disabled elements.
 * 2. Correct font properties not being inherited.
 * 3. Address margins set differently in Firefox 4+, Safari, and Chrome.
 */
button,
input,
optgroup,
select,
textarea {
  color: inherit;
  /* 1 */
  font: inherit;
  /* 2 */
  margin: 0;
  /* 3 */ }

/**
 * Address `overflow` set to `hidden` in IE 8/9/10/11.
 */
button {
  overflow: visible; }

/**
 * Address inconsistent `text-transform` inheritance for `button` and `select`.
 * All other form control elements do not inherit `text-transform` values.
 * Correct `button` style inheritance in Firefox, IE 8/9/10/11, and Opera.
 * Correct `select` style inheritance in Firefox.
 */
button,
select {
  text-transform: none; }

/**
 * 1. Avoid the WebKit bug in Android 4.0.* where (2) destroys native `audio`
 *    and `video` controls.
 * 2. Correct inability to style clickable `input` types in iOS.
 * 3. Improve usability and consistency of cursor style between image-type
 *    `input` and others.
 */
button,
html input[type="button"],
input[type="reset"],
input[type="submit"] {
  -webkit-appearance: button;
  /* 2 */
  cursor: pointer;
  /* 3 */ }

/**
 * Re-set default cursor for disabled elements.
 */
button[disabled],
html input[disabled] {
  cursor: default; }

/**
 * Remove inner padding and border in Firefox 4+.
 */
button::-moz-focus-inner,
input::-moz-focus-inner {
  border: 0;
  padding: 0; }

/**
 * Address Firefox 4+ setting `line-height` on `input` using `!important` in
 * the UA stylesheet.
 */
input {
  line-height: normal; }

/**
 * It's recommended that you don't attempt to style these elements.
 * Firefox's implementation doesn't respect box-sizing, padding, or width.
 *
 * 1. Address box sizing set to `content-box` in IE 8/9/10.
 * 2. Remove excess padding in IE 8/9/10.
 */
input[type="checkbox"],
input[type="radio"] {
  box-sizing: border-box;
  /* 1 */
  padding: 0;
  /* 2 */ }

/**
 * Fix the cursor style for Chrome's increment/decrement buttons. For certain
 * `font-size` values of the `input`, it causes the cursor style of the
 * decrement button to change from `default` to `text`.
 */
input[type="number"]::-webkit-inner-spin-button,
input[type="number"]::-webkit-outer-spin-button {
  height: auto; }

/**
 * 1. Address `appearance` set to `searchfield` in Safari and Chrome.
 * 2. Address `box-sizing` set to `border-box` in Safari and Chrome
 *    (include `-moz` to future-proof).
 */
input[type="search"] {
  -webkit-appearance: textfield;
  /* 1 */
  -moz-box-sizing: content-box;
  -webkit-box-sizing: content-box;
  /* 2 */
  box-sizing: content-box; }

/**
 * Remove inner padding and search cancel button in Safari and Chrome on OS X.
 * Safari (but not Chrome) clips the cancel button when the search input has
 * padding (and `textfield` appearance).
 */
input[type="search"]::-webkit-search-cancel-button,
input[type="search"]::-webkit-search-decoration {
  -webkit-appearance: none; }

/**
 * Define consistent border, margin, and padding.
 */
fieldset {
  border: 1px solid #c0c0c0;
  margin: 0 2px;
  padding: 0.35em 0.625em 0.75em; }

/**
 * 1. Correct `color` not being inherited in IE 8/9/10/11.
 * 2. Remove padding so people aren't caught out if they zero out fieldsets.
 */
legend {
  border: 0;
  /* 1 */
  padding: 0;
  /* 2 */ }

/**
 * Remove default vertical scrollbar in IE 8/9/10/11.
 */
textarea {
  overflow: auto; }

/**
 * Don't inherit the `font-weight` (applied by a rule above).
 * NOTE: the default cannot safely be changed in Chrome and Safari on OS X.
 */
optgroup {
  font-weight: bold; }

/* Tables
   ========================================================================== */
/**
 * Remove most spacing between table cells.
 */
table {
  border-collapse: collapse;
  border-spacing: 0; }

td,
th {
  padding: 0; }

/**
 * Base Component `html`
 *
 * The root component. Roots for `rem` value are set here.
 */
html {
  font: 1em sans-serif;
  line-height: 1.5em;
  min-height: 100%;
  overflow-y: scroll; }

/**
 * Base Component `*`
 *
 * Applies `border-box` box-sizing to all elements and pseudo elements for more
 * predictable control over the box model.
 */
*,
*:before,
*:after {
  box-sizing: border-box; }

/**
 * Base Component `table`
 *
 * A table for displaying information in an organized manner. This component is
 * best applied to table elements. By default it has a 1px border in
 * `$dark-gray`, collapsed borders and no border spacing.
 *
 * <table class="table table--bordered table--hover-row">
 *   <colgroup>
 *     <col class="one-eighth">
 *     <col>
 *   </colgroup>
 *   <thead>
 *     <tr>
 *       <th></th>
 *       <th>Header 2</th>
 *       <th>Header 3</th>
 *     </tr>
 *   </thead>
 *   <tbody>
 *     <tr>
 *       <td>Datum 1</td>
 *       <td>Datum 2</td>
 *       <td>Datum 3</td>
 *     </tr>
 *       <tr>
 *       <td>Datum 1</td>
 *       <td>Datum 2</td>
 *       <td>Datum 3</td>
 *     </tr>
 *   </tbody>
 * </table>
 *
 * 1. Properly align cells that span mutiple rows or columns.
 */
[colspan] {
  text-align: center; }

[colspan="1"] {
  text-align: left; }

[rowspan] {
  vertical-align: middle; }

[rowspan="1"] {
  vertical-align: top; }

.table {
  border: 1px solid #444; }

.table--striped tbody tr:nth-of-type(odd) {
  background-color: #ccc; }

.table--bordered th,
.table--bordered td {
  border: 1px solid #444; }

.table--bordered-horizontal tr {
  border-bottom: 1px solid #444; }

.table--bordered-vertical th,
.table--bordered-vertical td {
  border-right: 1px solid #444; }

.table--hover-row tbody tr:hover {
  background: #ccc; }

/**
 * Base Component `code`
 *
 * <code class="code--highlighted">var $ = {};</code>
 *
 * A `code` component that consists of a two modifiers and no unmodified
 * component class. The `--highlighted` modifier provides simple highlighting
 * styles. A background color, small border-radius and padding is applied. The
 * text is shrunken down as a result of the additional padding.
 *
 * The `--keyboard` modifier provides highlighting for input that is typically
 * entered using the keyboard.
 *
 * 1. Prevent code from breaking onto two lines.
 */
.code--highlighted,
.code--keyboard {
  border-radius: 5px;
  font-size: .85em;
  padding: 2px 3px;
  white-space: nowrap; }

.code--highlighted {
  background-color: #f5f5f5;
  color: #434343; }

.code--keyboard {
  background-color: #1a1a1a;
  color: #e6e6e6; }

/**
 * Base Component `img`
 *
 * <img class="img--center" src="/path/to/image" alt="Alt Text">
 *
 * An `img` component that consists of a number of modifiers and no unmodified
 * component class. To use an unmodified component, rely on the native `img`
 * element.
 */
figure > img {
  display: block; }

.img--fluid, .img--responsive {
  max-width: 100%; }

.img--responsive {
  height: auto; }

.img--right {
  float: right;
  margin: 0 0 24px 24px; }

.img--left {
  float: left;
  margin: 0 24px 24px 0; }

.img--center {
  display: block;
  margin: 0 auto 24px; }

.img--rounded {
  border-radius: 5px; }

.img--circle {
  border-radius: 50%; }

/**
 * Base Component `<heading>`
 * <h3 class="h6">
 *   The Title
 * </h3>
 *
 * A number of heading components that can be used to display information. A
 * standard `h1`-`h6` element can be used predictably, however the individual
 * class may also be used for more flexibility as well. For example, you can
 * style a form legend with the `.h2` class to turn it into a level-two heading
 * component without relying on the `h2` element.
 */
h1,
.h1 {
  font-size: 36px;
  font-size: 2.25rem; }

h2,
.h2 {
  font-size: 30px;
  font-size: 1.875rem; }

h3,
.h3 {
  font-size: 24px;
  font-size: 1.5rem; }

h4,
.h4 {
  font-size: 22px;
  font-size: 1.375rem; }

h5,
.h5 {
  font-size: 18px;
  font-size: 1.125rem; }

h6,
.h6 {
  font-size: 16px;
  font-size: 1rem; }

h1,
.h1 {
  font-weight: bold;
  line-height: 1.4; }

h2,
.h2 {
  font-weight: bold;
  line-height: 1.4; }

h3,
.h3 {
  font-weight: bold;
  line-height: 1.4; }

h4,
.h4 {
  font-weight: bold;
  line-height: 1.4; }

h5,
.h5 {
  font-weight: bold;
  line-height: 1.4; }

h6,
.h6 {
  font-weight: bold;
  line-height: 1.4; }

/**
 * Base Component `sub-<heading>`
 * <small class="sub-h4">
 *   The Subtitle
 * </small>
 *
 * A subheading that can be used to add additional content below or beside a
 * heading. This component is best applied to heading elements when standing
 * alone, or `span` or `small` elements when nested inside a heading component.
 */
.sub-h1, .sub-h1--block {
  font-size: 22.5px;
  font-size: 1.40625rem; }

.sub-h2, .sub-h2--block {
  font-size: 18.75px;
  font-size: 1.17188rem; }

.sub-h3, .sub-h3--block {
  font-size: 15px;
  font-size: 0.9375rem; }

.sub-h4, .sub-h4--block {
  font-size: 13.75px;
  font-size: 0.85938rem; }

.sub-h5, .sub-h5--block {
  font-size: 11.25px;
  font-size: 0.70313rem; }

.sub-h6, .sub-h6--block {
  font-size: 10px;
  font-size: 0.625rem; }

.sub-h1, .sub-h1--block {
  font-weight: normal;
  line-height: 1.25; }

.sub-h2, .sub-h2--block {
  font-weight: normal;
  line-height: 1.25; }

.sub-h3, .sub-h3--block {
  font-weight: normal;
  line-height: 1.25; }

.sub-h4, .sub-h4--block {
  font-weight: normal;
  line-height: 1.25; }

.sub-h5, .sub-h5--block {
  font-weight: normal;
  line-height: 1.25; }

.sub-h6, .sub-h6--block {
  font-weight: normal;
  line-height: 1.25; }

/**
 * Modifier `sub-<heading>--block`
 *
 * A `sub-<heading>` modifier sets the display type for the subheading. The
 * subheading may be used inside a naturally inline element, such as a `span`,
 * and this modifier lends `block` display to those types of elements.
 */
.sub-h1--block {
  display: block; }

.sub-h2--block {
  display: block; }

.sub-h3--block {
  display: block; }

.sub-h4--block {
  display: block; }

.sub-h5--block {
  display: block; }

.sub-h6--block {
  display: block; }

/**
 * Base Component `p`
 *
 * <p>
 *   Vestibulum id ligula porta felis euismod semper. Cras justo odio, dapibus
 *   ac facilisis in, egestas eget quam.
 * </p>
 *
 * A non-modifed component that relies on the `p` element.
 */
p {
  margin-bottom: 12px;
  margin-bottom: 0.75rem;
  font-family: inherit;
  font-weight: normal;
  margin-left: 0;
  margin-right: 0;
  margin-top: 0;
  text-rendering: optimizeLegibility; }

.lede {
  font-size: 21.344px;
  font-size: 1.334rem; }

/**
 * Base Component `list`
 *
 * <ul>
 *   <li>List item</li>
 *   <li>List item</li>
 *   <li>List item</li>
 * </ul>
 *
 * A list for displaying information in an organized manner. This component is
 * best applied to table elements. By default it has a 1px border in
 * `$dark-gray`, collapsed borders and no border spacing.
 *
 * 1. Remove any vertical spacing that might come in form nested lists.
 */
li > ul,
li > ol,
li > dl {
  margin-bottom: 0; }

/**
 * Modifier `list--[list-style-type]`
 *
 * A `list` modifier that sets the `list-style-type`. Relies on the
 * `$list-style-types` map below.
 *
 * <ul class="list--disc">
 *   <li>List item</li>
 *   <li>List item</li>
 *   <li>List item</li>
 * </ul>
 *
 * 1. The `--numbered` modifier is offered so you can style a list with numbers
 *    without relying on the `ol` element.
 * 2. Removes the default padding on list elements.
 */
.list--circle {
  list-style-type: circle; }

.list--dot {
  list-style-type: disc; }

.list--numbered {
  list-style-type: decimal; }

.list--square {
  list-style-type: square; }

.list--unstyled {
  list-style-type: none; }

.list--unstyled {
  padding-left: 0; }

/**
 * Modifier `list--description`
 *
 * A `list` modifier that styles the contents of a description list. Best used
 * on a `dl` element, but can be styled with other elements by using the
 * `.list--description` class and the appropriate element classes.
 *
 * 1. Remove the default `margin-left` applied to dd elements.
 */
dl dt,
dl .list--description-title,
.list--description dt,
.list--description .list--description-title {
  font-weight: bold; }
dl dd,
dl .list--description-body,
.list--description dd,
.list--description .list--description-body {
  margin-left: 0; }

/**
 * Base Component `form`
 *
 * A form component for capturing user submitted data. This component is
 * best applied to `form` elements. By default it has ...
 *
 * <form class="form">
 *
 * </form>
 */
fieldset {
  padding: 24px; }

textarea,
select,
input[type='email'], input[type='number'], input[type='password'], input[type='search'], input[type='tel'], input[type='text'], input[type='url'] {
  font-size: 13.6px;
  font-size: 0.85rem;
  padding: 6px;
  padding: 0.375rem;
  margin-top: 12px;
  margin-top: 0.75rem;
  margin-bottom: 12px;
  margin-bottom: 0.75rem;
  display: block;
  line-height: 1.2;
  width: 100%; }
  textarea:first-child,
  select:first-child,
  input[type='email']:first-child, input[type='number']:first-child, input[type='password']:first-child, input[type='search']:first-child, input[type='tel']:first-child, input[type='text']:first-child, input[type='url']:first-child {
    margin-top: 0; }
  textarea:last-child,
  select:last-child,
  input[type='email']:last-child, input[type='number']:last-child, input[type='password']:last-child, input[type='search']:last-child, input[type='tel']:last-child, input[type='text']:last-child, input[type='url']:last-child {
    margin-bottom: 0; }

select[multiple],
select[size] {
  display: block;
  height: auto; }

/**
 * Component `grid`
 *
 * <div class="grid">
 *  <div class="grid-col u-width3of12"></div>
 *  <div class="grid-col u-width3of12">
 *    <div class="grid">
 *      <div class="grid-col u-width1of3"></div>
 *      <div class="grid-col u-width1of3"></div>
 *      <div class="grid-col u-width1of3"></div>
 *    </div>
 *  </div>
 *  <div class="grid-col u-width3of12"></div>
 *  <div class="grid-col u-width3of12"></div>
 * </div>
 *
 * A `grid` component that can be used for predictably managing layouts. The
 * `grid` component relies on `grid-col` elements.
 *
 * Width or other layout-affecting styles and classes should not be applied to
 * the `grid` component, but instead to the `grid-col` elements.
 *
 * 1. Reset.
 * 2. Remove whitespace that comes affects elements with display `inline-block`.
 * 3. Counter the `padding-left` on the left-most `grid-col` element.
 * 4. Remove the `margin-left` when `grid` components are directly nested.
 */
.grid {
  display: block;
  font-size: 0;
  margin: 0 0 0 -24px;
  padding: 0;
  text-align: left; }
  .grid > .grid {
    margin: 0; }

.grid--colsCenter {
  text-align: center; }

.grid--colsRight {
  text-align: right; }

/**
 * Element `grid-col`
 *
 * A `grid-col` element that for the `grid` component. Though not  mandatory,
 * the best way to manage column widths is by using the  `u-width[n]of[n]`
 * utility.
 *
 * 1. Used instead of floating.
 * 2. Reset the font-size.
 * 3. Reset the default `vertical-align` for proper vertical positioning.
 * 4. Default to full width.
 */
.grid-col {
  display: inline-block;
  font-size: 16px;
  padding-left: 24px;
  vertical-align: top;
  width: 100%; }

.grid-col--centered {
  display: block;
  margin: 0 auto;
  padding: 0; }

/**
 * Utility `width`
 *
 * Builds out a series of width utility components. These are most commonly used
 * when building a grid as an adjacent class of the `grid-col` elements. The
 * generated widths are all percentage based.
 *
 * 1. If responsive, will generate width components that are prefixed according
 *    to the `$sizes` list.
 * 2. Relies on the `create-cols` mixin, which itself relies on the `grid-calc`
 *    function.
 */
.u-width--12of12, .u-width--6of6, .u-width--3of3, .u-width--12of12M, .u-width--6of6M, .u-width--3of3M, .u-width--12of12L, .u-width--6of6L, .u-width--3of3L, .u-width--12of12Xl, .u-width--6of6Xl, .u-width--3of3Xl {
  width: 100%; }

.u-width--11of12, .u-width--11of12M, .u-width--11of12L, .u-width--11of12Xl {
  width: 91.66667%; }

.u-width--10of12, .u-width--5of6, .u-width--10of12M, .u-width--5of6M, .u-width--10of12L, .u-width--5of6L, .u-width--10of12Xl, .u-width--5of6Xl {
  width: 83.33333%; }

.u-width--9of12, .u-width--9of12M, .u-width--9of12L, .u-width--9of12Xl {
  width: 75%; }

.u-width--8of12, .u-width--4of6, .u-width--2of3, .u-width--8of12M, .u-width--4of6M, .u-width--2of3M, .u-width--8of12L, .u-width--4of6L, .u-width--2of3L, .u-width--8of12Xl, .u-width--4of6Xl, .u-width--2of3Xl {
  width: 66.66667%; }

.u-width--7of12, .u-width--7of12M, .u-width--7of12L, .u-width--7of12Xl {
  width: 58.33333%; }

.u-width--6of12, .u-width--3of6, .u-width--6of12M, .u-width--3of6M, .u-width--6of12L, .u-width--3of6L, .u-width--6of12Xl, .u-width--3of6Xl {
  width: 50%; }

.u-width--5of12, .u-width--5of12M, .u-width--5of12L, .u-width--5of12Xl {
  width: 41.66667%; }

.u-width--4of12, .u-width--2of6, .u-width--1of3, .u-width--4of12M, .u-width--2of6M, .u-width--1of3M, .u-width--4of12L, .u-width--2of6L, .u-width--1of3L, .u-width--4of12Xl, .u-width--2of6Xl, .u-width--1of3Xl {
  width: 33.33333%; }

.u-width--3of12, .u-width--3of12M, .u-width--3of12L, .u-width--3of12Xl {
  width: 25%; }

.u-width--2of12, .u-width--1of6, .u-width--2of12M, .u-width--1of6M, .u-width--2of12L, .u-width--1of6L, .u-width--2of12Xl, .u-width--1of6Xl {
  width: 16.66667%; }

.u-width--1of12, .u-width--1of12M, .u-width--1of12L, .u-width--1of12Xl {
  width: 8.33333%; }

/**
 * Utility human widths
 *
 * Builds out an additional series of width utility components that are more in
 * a more human readable format. The generated widths are all percentage based.
 *
 * 1. Will only be compiled if the option is set.
 */
.u-width--one-eighth {
  width: 12.5%; }

.u-width--one-fourth {
  width: 25%; }

.u-width--one-third {
  width: 33.33%; }

.u-width--three-eighths {
  width: 37.5%; }

.u-width--one-half {
  width: 50%; }

.u-width--five-eighths {
  width: 62.5%; }

.u-width--two-thirds {
  width: 66.666%; }

.u-width--three-quarters {
  width: 75%; }

.u-width--seven-eighths {
  width: 87.5%; }

.u-width--full {
  width: 100%; }

/**
 * Utility `text`
 *
 * A text and font formatting and alignment utility that consists of a series of
 * alignment, weight and wordrapping modifiers and no un-modified class.
 */
/**
 * Modifier `--<alignment>`
 *
 * Produces alignment modidifers for left, center and right text alignment. The
 * loop builds the following classes: `--left`, `--right` and `--center`.
 */
.u-text--left {
  text-align: left; }

.u-text--right {
  text-align: right; }

.u-text--center {
  text-align: center; }

/**
 * Modifier `--<font weight>`
 *
 * Produces font weight modidifers for bold, semi-bold, light and ultra-light
 * font weights. The loops builds the following classes:
 *   `--bold`: 800 `font-weight`
 *   `--semi-bold`: 600 `font-weight`
 *   `--normal`: 400 `font-weight`
 *   `--light`: 300 `font-weight`
 *   `--ultra-light`: 200 `font-weight`
 */
.u-text--bold {
  font-weight: 800; }

.u-text--semi-bold {
  font-weight: 600; }

.u-text--normal {
  font-weight: 400; }

.u-text--light {
  font-weight: 300; }

.u-text--ultra-light {
  font-weight: 200; }

/**
 * Modifier `--<word wrap style>`
 *
 * Determine how to wrap text at the end of a line.
 */
.u-text--break-word {
  word-wrap: break-word; }

.u-text--no-wrap, .u-text--truncate {
  white-space: nowrap; }

/**
 * Modifier `--truncate`
 *
 * Stops text from continue past the defined width on the first line and
 * truncates with an ellipsis. This modifier relies on the `truncate-text`
 * mixin, which accepts a `$width` argument. By default the `$width` is set to
 * 100%. This modifier uses the default width.
 */
.u-text--truncate {
  max-width: 100%;
  overflow: hidden;
  text-overflow: ellipsis;
  width: 100%;
  word-wrap: normal; }

/**
 * Utility `pos--<positioning>`
 *
 * A `pos` utility that consists of four modifiers and no unmodified utility
 * class. The loop builds the following classes: `--static`, `--relative`,
 * `--absolute` and `--fixed`.
 */
.u-pos--static {
  position: static; }

.u-pos--relative, .u-vertical-center {
  position: relative; }

.u-pos--absolute, .u-full, .is-for-screen-readers {
  position: absolute; }

.u-pos--fixed {
  position: fixed; }

/**
 * Utility `full`
 *
 * Covers the entire area of the nearest ancestor HTML element with position
 * set to `relative`.
 */
.u-full {
  bottom: 0;
  left: 0;
  right: 0;
  top: 0; }

/**
 * Utility `vertical-center`
 *
 * Vertically centers an HTML element inside its parent.
 */
.u-vertical-center {
  top: 50%;
  transform: translateY(-50%); }

/**
 * Utility `float--<position>`
 *
 * A `float` utility that consists of a three modifiers and no unmodified
 * utility class.
 */
.u-float--left {
  float: left; }

.u-float--right {
  float: right; }

.u-float--none {
  float: none; }

/**
 * Utility `cf`
 *
 * The clearfix utility, which is used to contain floated child HTML elements.
 * This clearfix uses pseudo elements and is based of the micro clearfix.
 */
.u-cf::before, .u-cf::after {
  content: ' ';
  display: table; }
.u-cf:after {
  clear: both; }

/**
 * Utility `disp--<display type>`
 *
 * A `disp` utility that consists of a many modifiers and no unmodified
 * utility class.
 */
.u-disp--inline {
  display: inline; }

.u-disp--block, .u-text--truncate, .is-shown {
  display: block; }

.u-disp--inline-block {
  display: inline-block; }

.u-disp--table, table.is-shown {
  display: table; }

.u-disp--table-row, tr.is-shown {
  display: table-row; }

.u-disp--table-cell, td.is-shown,
th.is-shown {
  display: table-cell; }

.u-block-center, .is-centered {
  display: block;
  margin-left: auto;
  margin-right: auto; }

/**
 * Utility `replace-image`
 *
 * An image replacement utility. Useful for logos or other text-based graphics.
 *
 * <h1 class="u-replace-image">
 *   <a href="/">
 *     <img src="logo.png" alt="Logo Text" />
 *   </a>
 * </h1>
 */
.u-replace-image {
  overflow: hidden;
  text-indent: 100%;
  white-space: nowrap; }

/**
 * Utility `padding--<direction>[--size]`
 *
 * A series of spacing utilities for consistent padding in any direction and
 * with no un-modified class.
 *
 * 1. For convenience, class names are aliased to an abbreviated form that uses
 *    'p' plus the first letter of the direction. For example, `.u-padding-top`
 *    can be aliased to `.u-pt`.
 */
.u-pt--small, .u-pv--small,
.u-padding-vertical--small, .u-pa--small,
.u-padding-all--small,
.u-padding-top--small {
  padding-top: 10px; }

.u-pr--small, .u-ph--small,
.u-padding-horizontal--small, .u-pa--small,
.u-padding-all--small,
.u-padding-right--small {
  padding-right: 10px; }

.u-pb--small, .u-pv--small,
.u-padding-vertical--small, .u-pa--small,
.u-padding-all--small,
.u-padding-bottom--small {
  padding-bottom: 10px; }

.u-pl--small, .u-ph--small,
.u-padding-horizontal--small, .u-pa--small,
.u-padding-all--small,
.u-padding-left--small {
  padding-left: 10px; }

.u-pt--medium, .u-pv--medium,
.u-padding-vertical--medium, .u-pa--medium,
.u-padding-all--medium,
.u-padding-top--medium {
  padding-top: 20px; }

.u-pr--medium, .u-ph--medium,
.u-padding-horizontal--medium, .u-pa--medium,
.u-padding-all--medium,
.u-padding-right--medium {
  padding-right: 20px; }

.u-pb--medium, .u-pv--medium,
.u-padding-vertical--medium, .u-pa--medium,
.u-padding-all--medium,
.u-padding-bottom--medium {
  padding-bottom: 20px; }

.u-pl--medium, .u-ph--medium,
.u-padding-horizontal--medium, .u-pa--medium,
.u-padding-all--medium,
.u-padding-left--medium {
  padding-left: 20px; }

.u-pt--large, .u-pv--large,
.u-padding-vertical--large, .u-pa--large,
.u-padding-all--large,
.u-padding-top--large {
  padding-top: 30px; }

.u-pr--large, .u-ph--large,
.u-padding-horizontal--large, .u-pa--large,
.u-padding-all--large,
.u-padding-right--large {
  padding-right: 30px; }

.u-pb--large, .u-pv--large,
.u-padding-vertical--large, .u-pa--large,
.u-padding-all--large,
.u-padding-bottom--large {
  padding-bottom: 30px; }

.u-pl--large, .u-ph--large,
.u-padding-horizontal--large, .u-pa--large,
.u-padding-all--large,
.u-padding-left--large {
  padding-left: 30px; }

/**
 * Utility `margin--<direction>[--size]`
 *
 * A series of spacing utilities for consistent margin in any direction and
 * with no un-modified class.
 *
 * 1. For convenience, class names are aliased to an abbreviated form that uses
 *    'm' mlus the first letter of the direction. For exammle, `.u-margin-top`
 *    can be aliased to `.u-mt`.
 */
.u-mt--small, .u-mv--small,
.u-margin-vertical--small, .u-ma--small,
.u-margin-all--small,
.u-margin-top--small {
  margin-top: 10px; }

.u-mr--small, .u-mh--small,
.u-margin-horizontal--small, .u-ma--small,
.u-margin-all--small,
.u-margin-right--small {
  margin-right: 10px; }

.u-mb--small, .u-mv--small,
.u-margin-vertical--small, .u-ma--small,
.u-margin-all--small,
.u-margin-bottom--small {
  margin-bottom: 10px; }

.u-ml--small, .u-mh--small,
.u-margin-horizontal--small, .u-ma--small,
.u-margin-all--small,
.u-margin-left--small {
  margin-left: 10px; }

.u-mt--medium, .u-mv--medium,
.u-margin-vertical--medium, .u-ma--medium,
.u-margin-all--medium,
.u-margin-top--medium {
  margin-top: 20px; }

.u-mr--medium, .u-mh--medium,
.u-margin-horizontal--medium, .u-ma--medium,
.u-margin-all--medium,
.u-margin-right--medium {
  margin-right: 20px; }

.u-mb--medium, .u-mv--medium,
.u-margin-vertical--medium, .u-ma--medium,
.u-margin-all--medium,
.u-margin-bottom--medium {
  margin-bottom: 20px; }

.u-ml--medium, .u-mh--medium,
.u-margin-horizontal--medium, .u-ma--medium,
.u-margin-all--medium,
.u-margin-left--medium {
  margin-left: 20px; }

.u-mt--large, .u-mv--large,
.u-margin-vertical--large, .u-ma--large,
.u-margin-all--large,
.u-margin-top--large {
  margin-top: 30px; }

.u-mr--large, .u-mh--large,
.u-margin-horizontal--large, .u-ma--large,
.u-margin-all--large,
.u-margin-right--large {
  margin-right: 30px; }

.u-mb--large, .u-mv--large,
.u-margin-vertical--large, .u-ma--large,
.u-margin-all--large,
.u-margin-bottom--large {
  margin-bottom: 30px; }

.u-ml--large, .u-mh--large,
.u-margin-horizontal--large, .u-ma--large,
.u-margin-all--large,
.u-margin-left--large {
  margin-left: 30px; }

/**
 * State display
 *
 * Display states to toggle HTML elements between hidden, visible and invisible.
 *
 * 1. Credit to Twitter Bootstrap
 */
.is-invisible {
  visibility: hidden; }

.is-visible, .is-shown, table.is-shown, tr.is-shown, td.is-shown,
th.is-shown {
  visibility: visible; }

.is-hidden {
  display: none; }

.is-for-screen-readers {
  border: 0;
  clip: rect(0, 0, 0, 0);
  height: 1px;
  overflow: hidden;
  padding: 0;
  width: 1px; }

/**
 * State cursor
 *
 * Cursor states for when mousing over HTML elements.
 */
.is-clickable {
  cursor: pointer; }

.is-not-clickable {
  cursor: default; }

.is-draggable {
  cursor: move; }

/**
 * State context
 *
 * Context states to apply base contextual styles to components.
 */
