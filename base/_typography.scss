/**
 * Base Component `heading[size]`
 * <h1>
 *   The Title
 * </h1>
 *
 * A number of `heading` components that can be used to display information. A
 * standard `h1`-`h6` element can be used predictably, however the individual
 * class may also be used for more flexibility as well. For example, you can
 * style a form legend with the `.headingTwo` to turn it into a `headingTwo`
 * component without relying on the `h2` element.
 */

h1,
.headingOne {
  @include font-size($heading-one-size);
}

h2,
.headingTwo {
  @include font-size($heading-two-size);
}

h3,
.headingThree {
  @include font-size($heading-three-size);
}

h4,
.headingFour {
  @include font-size($heading-four-size);
}

h5,
.headingFive {
  @include font-size($heading-five-size);
}

h6,
.headingSix {
  @include font-size($heading-six-size);
}

h1, h2, h3, h4, h5, h6,
.headingOne, .headingTwo,
.headingThree, .headingFour,
.headingFive, .headingSix {
  font-weight: bold;
  line-height: 1.4;
}

/**
 * Base Component `subheading[size]`
 * <small class="subheadingOne">
 *   The Subtitle
 * </small>
 *
 * A subheading that can be used to add additional content below or beside a
 * heading. This component is best applied to heading elements when standing
 * alone, or `span` or `small` elements when combined with nested inside a
 * `heading` component.
 */

.subheadingOne {
  @include font-size($heading-one-size * 5/8);
}

.subheadingTwo {
  @include font-size($heading-two-size * 5/8);
}

.subheadingThree {
  @include font-size($heading-three-size * 5/8);
}

.subheadingFour {
  @include font-size($heading-four-size * 5/8);
}

.subheadingFive {
  @include font-size($heading-five-size * 5/8);
}

.subheadingSix {
  @include font-size($heading-six-size * 5/8);
}

.subheadingOne, .subheadingTwo,
.subheadingThree, .subheadingFour,
.subheadingFive, .subheadingSix {
  font-weight: normal;
  line-height: 1.25;
}

/**
 * Modifier `subheading[size]--block`
 *
 * A `subheading[size]` modifier sets the display type for the subheading. The
 * subheading may be used inside a naturally inline element, such as a `span`,
 * so this modifier lends `block` display to those types of elements.
 */

.subheadingOne--block {
  @extend .subheadingOne;
}
.subheadingTwo--block {
  @extend .subheadingTwo;
}
.subheadingThree--block {
  @extend .subheadingThree;
}
.subheadingFour--block {
  @extend .subheadingFour;
}
.subheadingFive--block {
  @extend .subheadingFive;
}
.subheadingSix--block {
  @extend .subheadingSix;
}

.subheadingOne--block, .subheadingTwo--block,
.subheadingThree--block, .subheadingFour--block,
.subheadingFive--block, .subheadingSix--block {
  display: block;
}

/**
 * Base Component `p`
 *
 * <p>
 *   Vestibulum id ligula porta felis euismod semper. Cras justo odio, dapibus
 *   ac facilisis in, egestas eget quam.
 * </p>
 *
 * A non-modifed component that relies on the `p` element.
 */

p {
  @include to-rem(margin-bottom, ($base-line-height / 2));
  font-family: inherit;
  font-weight: normal;
  margin-left: 0;
  margin-right: 0;
  margin-top: 0;
  text-rendering: optimizeLegibility;
}

.lede {
  @include font-size($base-font-size * 1.334);
}
